---
apiVersion: v1
kind: Secret
metadata:
  name: backstage-secret
type: Opaque
stringData:
  # Database configuration
  POSTGRES_HOST: <path:secret/data/postgresql/backstage#host>
  POSTGRES_USER: <path:secret/data/postgresql/backstage#username>
  POSTGRES_PASSWORD: <path:secret/data/postgresql/backstage#password>

  # Backend configuration
  BACKEND_SECRET: <path:secret/data/backstage/config#backend_secret>
  BACKSTAGE_BASE_URL: https://<path:secret/data/backstage/config#base_url>

  # GitHub Auth configuration
  AUTH_GITHUB_CLIENT_ID: <path:secret/data/backstage/github#clientId>
  AUTH_GITHUB_CLIENT_SECRET: <path:secret/data/backstage/github#clientSecret>

  # GitHub Integration configuration
  GITHUB_APP_ID: <path:secret/data/backstage/github#appId>
  GITHUB_CLIENT_ID: <path:secret/data/backstage/github#clientId>
  GITHUB_CLIENT_SECRET: <path:secret/data/backstage/github#clientSecret>
  GITHUB_WEBHOOK_SECRET: <path:secret/data/backstage/github#webhookSecret>
  GITHUB_PRIVATE_KEY: <path:secret/data/backstage/github#privateKey>

  # Gitea configuration
  GITEA_CLIENT_ID: <path:secret/data/backstage/gitea#clientId>
  GITEA_CLIENT_SECRET: <path:secret/data/backstage/gitea#clientSecret>
  GITEA_TOKEN: <path:secret/data/backstage/gitea#token>
  GITEA_URL: <path:secret/data/gitea/config#gitea_address>

  # Zitadel/OIDC configuration
  ZITADEL_PROJECT_ID: <path:secret/data/backstage/zitadel#projectId>
  ZITADEL_CLIENT_ID: <path:secret/data/backstage/zitadel#clientId>
  ZITADEL_CLIENT_SECRET: <path:secret/data/backstage/zitadel#clientSecret>
  ZITADEL_URL: https://<path:secret/data/zitadel/config#base_url>

  # Kubernetes configuration
  K8S_INFRA2_TOKEN: ""

  # Grafana configuration
  GRAFANA_TOKEN: ""

  # Dependency Track configuration
  DEPENDENCYTRACK_TOKEN: ""

  # Complete standalone production configuration that replaces base config entirely
  app-config.production.yaml: |
    app:
      title: OpenTelekomCloud Backstage
      baseUrl: ${BACKSTAGE_BASE_URL}

    organization:
      name: OpenTelekomCloud

    backend:
      auth:
        dangerouslyDisableDefaultAuthPolicy: ${DANGEROUS_DISABLE_AUTH_POLICY}
        keys:
          - secret: ${BACKEND_SECRET}
      baseUrl: ${BACKSTAGE_BASE_URL}
      listen:
        port: 7007
        host: 0.0.0.0
      cors:
        origin: ${BACKSTAGE_BASE_URL}
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      database:
        client: pg
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          database: backstage
      # Override reading to prevent localhost references
      reading:
        allow:
          - host: ${GITEA_URL}
          - host: github.com
          - host: quay.io

    # Auth configuration like working instance
    auth:
      environment: ${AUTH_ENVIRONMENT}
      providers:
        oauth2Proxy: {}
        github:
          development:
            clientId: ${GITHUB_CLIENT_ID}
            clientSecret: ${GITHUB_CLIENT_SECRET}
          production:
            clientId: ${GITHUB_CLIENT_ID}
            clientSecret: ${GITHUB_CLIENT_SECRET}
        gitea:
          development:
            metadataUrl: https://${GITEA_URL}/.well-known/openid-configuration
            authorizationUrl: https://${GITEA_URL}/login/oauth/authorize
            tokenUrl: https://${GITEA_URL}/login/oauth/access_token
            clientId: ${GITEA_CLIENT_ID}
            clientSecret: ${GITEA_CLIENT_SECRET}
            clientSecret: ${GITHUB_CLIENT_SECRET}
          production:
            metadataUrl: https://${GITEA_URL}/.well-known/openid-configuration
            authorizationUrl: https://${GITEA_URL}/login/oauth/authorize
            tokenUrl: https://${GITEA_URL}/login/oauth/access_token
            clientId: ${GITEA_CLIENT_ID}
            clientSecret: ${GITEA_CLIENT_SECRET}
            clientSecret: ${GITHUB_CLIENT_SECRET}

    # Override techdocs to prevent local examples
    techdocs:
      builder: 'local'
      generator:
        runIn: 'docker'
      publisher:
        type: 'local'

    # Override scaffolder with minimal config
    scaffolder: {}

    catalog:
      # Completely override import settings to prevent example app
      import:
        entityFilename: catalog-info.yaml
        pullRequestBranchName: backstage-integration
      providers:
        zitadelOrg:
          default:
            baseUrl: ${ZITADEL_URL}
            projectId: ${ZITADEL_PROJECT_ID}
            clientId: ${ZITADEL_CLIENT_ID}
            clientSecret: ${ZITADEL_CLIENT_SECRET}
      rules:
        - allow: [Component, System, API, Resource, Location, Group, User, Template]
      locations:
        - type: url
          target: https://${GITEA_URL}/backstage/catalog-ecosystem/src/branch/main/catalog.yaml
          rules:
            - allow: [Domain, Group, User, Location, Component, Resource, API, System]
        - type: url
          target: https://${GITEA_URL}/backstage/catalog-ecosystem/src/branch/main/catalog.yaml
        - type: url
          target: https://${GITEA_URL}/backstage/catalog-ecosystem/src/branch/main/catalog.yaml
        - type: url
          target: https://github.com/opentelekomcloud-infra/backstage-templates/blob/main/catalog.yaml
          rules:
            - allow: [Template]

    integrations:
      # GitHub integration for data access only (not authentication)
      gitea:
        - host: ${GITEA_URL}
          password: ${GITEA_TOKEN}
      github:
        - host: github.com
          apps:
            - appId: ${GITHUB_APP_ID}
              clientId: ${GITHUB_CLIENT_ID}
              clientSecret: ${GITHUB_CLIENT_SECRET}
              webhookSecret: ${GITHUB_WEBHOOK_SECRET}
              privateKey: |
                ${GITHUB_PRIVATE_KEY}

    kubernetes:
      serviceLocatorMethod:
        type: 'multiTenant'
      clusterLocatorMethods:
        - type: 'config'
          clusters:
            - name: ""
              authProvider: 'serviceAccount'
              skipTLSVerify: true
              skipMetricsLookup: true
              url: ''
              serviceAccountToken: ${K8S_INFRA2_TOKEN}

    proxy:
      '/grafana/api':
        target: https://dashboard.eco-preprod.tsi-dev.otc-service.com
        headers:
          Authorization: "Bearer ${GRAFANA_TOKEN}"
      '/dependencytrack':
        target: https://dependencytrack.eco-preprod.tsi-dev.otc-service.com
        allowedMethods: ['GET']
        headers:
          X-Api-Key: "${DEPENDENCYTRACK_TOKEN}"
      '/quay/api':
        target: 'https://quay.io'
        headers:
          X-Requested-With: 'XMLHttpRequest'
