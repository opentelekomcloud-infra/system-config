---
apiVersion: v1
kind: Secret
metadata:
  name: oauth2-proxy-config
stringData:
  oauth2-proxy.cfg: |
    # Network configuration
    http_address = "0.0.0.0:4180"

    # OIDC Provider configuration
    provider = "oidc"
    oidc_issuer_url = "https://auth.example.com"
    skip_oidc_discovery = false

    # Application configuration
    redirect_url = "https://example.com/oauth2/callback"
    whitelist_domains = [
        "example.com"
    ]
    email_domains = [
        "*"
    ]
    upstreams = [
        "http://app:8080"
    ]

    # Session and Redis configuration
    session_store_type = "redis"
    redis_connection_url = "redis://redis.redis.svc.cluster.local:6379"

    # Security headers and cookie settings
    cookie_secure = true
    cookie_httponly = true
    cookie_samesite = "lax"
    cookie_expire = "24h"
    cookie_refresh = "1h"

    # Request validation
    skip_auth_regex = []
    pass_basic_auth = false
    pass_access_token = false
    pass_authorization_header = false
    set_authorization_header = false
    set_xauthrequest = true
    pass_host_header = true

    # Logging and monitoring
    request_logging = true
    auth_logging = true
    silence_ping_logging = true

    # OIDC specific security settings
    insecure_oidc_allow_unverified_email = false
    oidc_email_claim = "email"
    oidc_groups_claim = "urn:zitadel:iam:org:project:roles"
    oidc_groups_claim = "groups"
    scope = "openid profile email groups urn:zitadel:iam:org:project:roles urn:zitadel:iam:user:metadata"

    # Secrets (resolved by ArgoCD Vault Plugin)
    client_id = "<path:secret/data/docsportal/oidc#client_id>"
    client_secret = "<path:secret/data/docsportal/oidc#client_secret>"
    cookie_secret = "<path:secret/data/docsportal/oidc#cookie_secret>"
