# Processed ArgoCD values for vault plugin deployment

# Values for the argo-cd subchart
argo-cd:
  nameOverride: argocd

  createAggregateRoles: false
  createClusterRoles: true

  crds:
    install: true
    keep: true

  dex:
    enabled: false

  global:
    domain: argocd.eco-preprod.tsi-dev.otc-service.com
    # Enable repository credentials management
    repositoryCredentials:
      enabled: true
    # Additional global configurations for vault plugin
    env:
      - name: ARGOCD_VAULT_PLUGIN_ENABLED
        value: "true"
      - name: ARGOCD_EXEC_TIMEOUT
        value: "300"

  ## Server
  server:
    extensions:
      containerSecurityContext:
        seccompProfile:
          type: Unconfined

    containerSecurityContext:
      seccompProfile:
        type: Unconfined

    # Service account for Vault authentication
    serviceAccount:
      create: true
      name: argocd-server
      automountServiceAccountToken: true
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "argocd"

    ingress:
      enabled: true
      annotations:
        cert-manager.io/cluster-issuer: letsencrypt-prod
        kubernetes.io/tls-acme: "true"
        nginx.ingress.kubernetes.io/backend-protocol: HTTPS
        nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
        nginx.ingress.kubernetes.io/ssl-passthrough: "true"
        cert-manager.io/private-key-algorithm: RSA
        cert-manager.io/private-key-size: "4096"
        cert-manager.io/private-key-rotation-policy: Always
      ingressClassName: "nginx"
      hosts:
        - argocd.eco-preprod.tsi-dev.otc-service.com
      tls:
        - hosts:
            - argocd.eco-preprod.tsi-dev.otc-service.com
          secretName: argocd-server-tls

    # Environment variables for Vault access
    env:
      - name: VAULT_ADDR
        value: "https://vault-lb.eco-preprod.tsi-dev.otc-service.com"
      - name: AVP_AUTH_TYPE
        value: "token"
      - name: AVP_TYPE
        value: "vault"
      - name: VAULT_TOKEN
        valueFrom:
          secretKeyRef:
            name: vault-token
            key: token

    # InitContainer to resolve admin password from Vault
    initContainers:
      - name: vault-secret-resolver
        image: hashicorp/vault:1.20
        command:
          - sh
          - -c
          - |
            set -e
            echo "Authenticating to Vault using direct token..."

            # Use the provided Vault token directly
            export VAULT_TOKEN="$VAULT_TOKEN_VALUE"

            echo "Authentication successful! Using provided token."

            echo "Retrieving secrets from Vault..."
            ADMIN_PASSWORD=$(vault kv get -field=admin_password secret/argocd/config)
            SERVER_SECRET_KEY=$(vault kv get -field=server_secret_key secret/argocd/config)
            OIDC_KEYCLOAK_CLIENT_SECRET=$(vault kv get -field=oidc_keycloak_client_secret secret/argocd/config)
            VAULT_ADDRESS=$(vault kv get -field=vault_address secret/argocd/config)

            echo "Storing secrets in shared volume..."
            echo -n "$ADMIN_PASSWORD" > /shared/admin_password
            echo -n "$SERVER_SECRET_KEY" > /shared/server_secret_key
            echo -n "$OIDC_KEYCLOAK_CLIENT_SECRET" > /shared/oidc_keycloak_client_secret
            echo -n "$VAULT_ADDRESS" > /shared/vault_address

            echo "Vault secrets retrieved successfully!"
        env:
          - name: VAULT_ADDR
            value: "https://vault-lb.eco-preprod.tsi-dev.otc-service.com"
          - name: VAULT_SKIP_VERIFY
            value: "false"
          - name: VAULT_TOKEN_VALUE
            valueFrom:
              secretKeyRef:
                name: vault-token
                key: token
        volumeMounts:
          - name: shared-secrets
            mountPath: /shared
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: false
      - name: kubectl-patcher
        image: bitnami/kubectl:latest
        command:
          - sh
          - -c
          - |
            set -e
            echo "Checking argocd-secret..."

            # Wait for the secret to be created by Helm
            while ! kubectl get secret argocd-secret -n argocd; do
              echo "Waiting for argocd-secret to be created..."
              sleep 2
            done

            # Always read secrets from shared volume (they're needed for any missing keys)
            ADMIN_PASSWORD=$(cat /shared/admin_password)
            SERVER_SECRET_KEY=$(cat /shared/server_secret_key)
            OIDC_KEYCLOAK_CLIENT_SECRET=$(cat /shared/oidc_keycloak_client_secret)
            VAULT_ADDRESS=$(cat /shared/vault_address)

            # Generate current timestamp for password mtime
            CURRENT_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ")

            # Get current secret data
            SECRET_DATA=$(kubectl get secret argocd-secret -n argocd -o jsonpath='{.data}' 2>/dev/null || echo "{}")

            # Check which keys are missing and need to be added
            PATCH_NEEDED=false
            PATCH_DATA="{"

            # Check each required key and add if missing
            if ! echo "$SECRET_DATA" | grep -q "admin.password"; then
              echo "Adding admin.password..."
              PATCH_DATA="$PATCH_DATA\"admin.password\": \"$(echo -n "$ADMIN_PASSWORD" | base64 -w 0)\","
              PATCH_NEEDED=true
            fi

            if ! echo "$SECRET_DATA" | grep -q "admin.passwordMtime"; then
              echo "Adding admin.passwordMtime..."
              PATCH_DATA="$PATCH_DATA\"admin.passwordMtime\": \"$(echo -n "$CURRENT_TIME" | base64 -w 0)\","
              PATCH_NEEDED=true
            fi

            if ! echo "$SECRET_DATA" | grep -q "server.secretkey"; then
              echo "Adding server.secretkey..."
              PATCH_DATA="$PATCH_DATA\"server.secretkey\": \"$(echo -n "$SERVER_SECRET_KEY" | base64 -w 0)\","
              PATCH_NEEDED=true
            fi

            if ! echo "$SECRET_DATA" | grep -q "oidc.keycloak.clientSecret"; then
              echo "Adding oidc.keycloak.clientSecret..."
              PATCH_DATA="$PATCH_DATA\"oidc.keycloak.clientSecret\": \"$(echo -n "$OIDC_KEYCLOAK_CLIENT_SECRET" | base64 -w 0)\","
              PATCH_NEEDED=true
            fi

            if ! echo "$SECRET_DATA" | grep -q "VAULT_ADDR"; then
              echo "Adding VAULT_ADDR..."
              PATCH_DATA="$PATCH_DATA\"VAULT_ADDR\": \"$(echo -n "$VAULT_ADDRESS" | base64 -w 0)\","
              PATCH_NEEDED=true
            fi

            # Remove trailing comma and close the JSON
            PATCH_DATA=$(echo "$PATCH_DATA" | sed 's/,$//')
            PATCH_DATA="$PATCH_DATA}"

            if [ "$PATCH_NEEDED" = "true" ]; then
              echo "Updating secret with missing keys..."
              kubectl patch secret argocd-secret -n argocd --type='merge' -p="{\"data\": $PATCH_DATA}"
              echo "Secret updated with missing keys successfully!"
            else
              echo "All required keys already exist in secret, no update needed."
            fi
        volumeMounts:
          - name: shared-secrets
            mountPath: /shared
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: false

    # Additional volumes for init containers
    volumes:
      - name: shared-secrets
        emptyDir: {}

  repoServer:
    env:
      - name: ARGOCD_GPG_ENABLED
        value: "false"
      - name: VAULT_ADDR
        value: "https://vault-lb.eco-preprod.tsi-dev.otc-service.com"
      - name: AVP_AUTH_TYPE
        value: "token"
      - name: AVP_TYPE
        value: "vault"
      - name: VAULT_TOKEN
        valueFrom:
          secretKeyRef:
            name: vault-token
            key: token
    serviceAccount:
      create: true
      name: argocd-repo-server
      automountServiceAccountToken: true
      annotations:
        vault.hashicorp.com/agent-inject: "true"
        vault.hashicorp.com/role: "argocd"

    initContainers:
      - name: download-tools
        image: registry.access.redhat.com/ubi8
        env:
          - name: AVP_VERSION
            value: 1.18.1
        command: [sh, -c]
        args:
          - >-
            cd /tmp &&
            curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
            chmod +x argocd-vault-plugin &&
            cp argocd-vault-plugin /custom-tools/
        securityContext:
          runAsNonRoot: true
          runAsUser: 1001
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL
          readOnlyRootFilesystem: false
        volumeMounts:
          - mountPath: /custom-tools
            name: custom-tools
    extraContainers:
      - name: avp
        command: [/var/run/argocd/argocd-cmp-server]
        image: quay.io/argoproj/argocd:v3.0.5
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        env:
          - name: VAULT_ADDR
            value: "https://vault-lb.eco-preprod.tsi-dev.otc-service.com"
          - name: AVP_AUTH_TYPE
            value: "token"
          - name: AVP_TYPE
            value: "vault"
          - name: VAULT_TOKEN
            valueFrom:
              secretKeyRef:
                name: vault-token
                key: token
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: argocd-vault-plugin-helm.yaml
            name: cmp-plugin
          - mountPath: /usr/local/bin/argocd-vault-plugin
            subPath: argocd-vault-plugin
            name: custom-tools
      - name: avp-with-args
        command: [/var/run/argocd/argocd-cmp-server]
        image: quay.io/argoproj/argocd:v3.0.5
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        env:
          - name: VAULT_ADDR
            value: "https://vault-lb.eco-preprod.tsi-dev.otc-service.com"
          - name: AVP_AUTH_TYPE
            value: "token"
          - name: AVP_TYPE
            value: "vault"
          - name: VAULT_TOKEN
            valueFrom:
              secretKeyRef:
                name: vault-token
                key: token
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: argocd-vault-plugin-helm-with-args.yaml
            name: cmp-plugin
          - mountPath: /usr/local/bin/argocd-vault-plugin
            subPath: argocd-vault-plugin
            name: custom-tools
      - name: avp-kustomize
        command: [/var/run/argocd/argocd-cmp-server]
        image: quay.io/argoproj/argocd:v3.0.5
        securityContext:
          runAsNonRoot: true
          runAsUser: 999
        env:
          - name: VAULT_ADDR
            value: "https://vault-lb.eco-preprod.tsi-dev.otc-service.com"
          - name: AVP_AUTH_TYPE
            value: "token"
          - name: AVP_TYPE
            value: "vault"
          - name: VAULT_TOKEN
            valueFrom:
              secretKeyRef:
                name: vault-token
                key: token
        volumeMounts:
          - mountPath: /var/run/argocd
            name: var-files
          - mountPath: /home/argocd/cmp-server/plugins
            name: plugins
          - mountPath: /home/argocd/cmp-server/config/plugin.yaml
            subPath: argocd-vault-plugin-kustomize.yaml
            name: cmp-plugin
          - mountPath: /usr/local/bin/argocd-vault-plugin
            subPath: argocd-vault-plugin
            name: custom-tools
    volumes:
      - configMap:
          name: argocd-cmp-cm
        name: cmp-plugin
      - name: custom-tools
        emptyDir: {}

    containerSecurityContext:
      seccompProfile:
        type: Unconfined

  ## ApplicationSet controller
  applicationSet:
    containerSecurityContext:
      seccompProfile:
        type: Unconfined

  ## Redis configuration
  redis:
    enabled: true

  redis-ha:
    enabled: false

  configs:
    rbac:
      create: true
      policy.csv: |
        # Admin roles - full access including secrets
        g, /argocd-admin, role:admin
        g, /argocd-ac, role:admin

        # Application management role
        g, /argocd-developers, role:ac
        p, role:ac, applications, *, docusaurus/*, allow
        p, role:ac, applications, get, *, allow
        p, role:ac, applications, list, *, allow
        p, role:ac, repositories, get, *, allow
        p, role:ac, repositories, list, *, allow
        p, role:ac, secrets, *, docusaurus/*, allow

        # Read-only role - NO secrets access
        g, /argocd-viewers, role:readonly
        p, role:readonly, applications, get, *, allow
        p, role:readonly, applications, list, *, allow
        p, role:readonly, repositories, get, *, allow
        p, role:readonly, repositories, list, *, allow
        p, role:readonly, secrets, *, *, deny

        # No-secrets role - explicitly denied secrets access
        g, /argocd-no-secrets, role:no-secrets
        p, role:no-secrets, applications, get, *, allow
        p, role:no-secrets, applications, list, *, allow
        p, role:no-secrets, repositories, get, *, allow
        p, role:no-secrets, repositories, list, *, allow
        p, role:no-secrets, secrets, *, *, deny

        # System role for service accounts - LIMITED permissions
        p, role:system, applications, get, *, allow
        p, role:system, applications, list, *, allow
        p, role:system, repositories, get, *, allow
        p, role:system, repositories, list, *, allow
        p, role:system, secrets, *, *, deny

        # Special vault-reader role - ONLY for ArgoCD internal operations
        # This should ONLY be used by ArgoCD's own service accounts for Vault plugin
        p, role:vault-reader, secrets, get, argocd/*, allow
        p, role:vault-reader, secrets, list, argocd/*, allow
        p, role:vault-reader, secrets, get, */vault-token, allow
        p, role:vault-reader, secrets, get, */argocd-secret, allow

        # Assign service account to vault-reader (restricted scope)
        g, argocd-preprod-repo-server, role:vault-reader

        # Explicit denials for all other combinations
        p, role:vault-reader, secrets, create, *, deny
        p, role:vault-reader, secrets, update, *, deny
        p, role:vault-reader, secrets, patch, *, deny
        p, role:vault-reader, secrets, delete, *, deny
      policy.default: "role:none"
      policy.matchMode: "glob"
      scopes: "[groups]"


    cm:
      url: https://argocd.eco-preprod.tsi-dev.otc-service.com
      oidc.config: |
        name: Keycloak
        issuer: https://keycloak.eco-preprod.tsi-dev.otc-service.com/realms/eco
        clientID: argocd
        clientSecret: $oidc.keycloak.clientSecret
        requestedScopes: ["openid", "profile", "email", "groups"]
      # Additional cluster configuration
      cluster.inClusterEnabled: "true"
      application.instanceLabelKey: argocd.argoproj.io/instance

    secret:
      createSecret: true
      extra:
        # These will be populated by the init container from Vault
        oidc.keycloak.clientSecret: "placeholder-will-be-replaced-by-init-container"
        VAULT_ADDR: "placeholder-will-be-replaced-by-init-container"
        AVP_AUTH_TYPE: "token"
        AVP_TYPE: "vault"
        admin.password: "placeholder-will-be-replaced-by-init-container"
        server.secretkey: "placeholder-will-be-replaced-by-init-container"
    cmp:
      create: true
      plugins:
        argocd-vault-plugin-helm:
          discover:
            find:
              command:
                - sh
                - "-c"
                - "find . -name 'Chart.yaml' && find . -name 'values.yaml'"
          init:
            command:
              - bash
              - "-c"
              - |
                helm repo add falcosecurity https://falcosecurity.github.io/charts
                helm dependency build
          generate:
            command:
              - bash
              - "-c"
              - |
                # Build Helm set parameters from environment variables
                HELM_SETS=""
                for var in $(env | grep "^HELM_PARAM_" | cut -d= -f1); do
                  param_name=$(echo "$var" | sed 's/^HELM_PARAM_//' | sed 's/_/./g' | tr '[:upper:]' '[:lower:]')
                  param_value=$(eval echo \$$var)
                  HELM_SETS="$HELM_SETS --set $param_name=\"$param_value\""
                done

                # Generate helm template with vault processing
                if [ -n "$ARGOCD_ENV_HELM_VALUES" ]; then
                  helm template $ARGOCD_APP_NAME --include-crds -n $ARGOCD_APP_NAMESPACE -f <(echo "$ARGOCD_ENV_HELM_VALUES") $HELM_SETS . |
                  argocd-vault-plugin generate -s argocd:argocd-secret -
                else
                  helm template $ARGOCD_APP_NAME --include-crds -n $ARGOCD_APP_NAMESPACE ${ARGOCD_ENV_HELM_ARGS} $HELM_SETS . |
                  argocd-vault-plugin generate -s argocd:argocd-secret -
                fi
          allowConcurrency: true
          lockRepo: false
        argocd-vault-plugin-helm-with-args:
          allowConcurrency: true
          discover:
            find:
              command:
                - sh
                - -c
                - find . -name 'Chart.yaml' && find . -name 'values.yaml'
          generate:
            command:
              - bash
              - -c
              - |
                helm template $ARGOCD_APP_NAME -n $ARGOCD_APP_NAMESPACE ${ARGOCD_ENV_HELM_ARGS} . --include-crds |
                argocd-vault-plugin generate -s argocd:argocd-secret -
          init:
            command:
              - bash
              - -c
              - |
                helm dependency build
          lockRepo: false
        argocd-vault-plugin-kustomize:
          discover:
            find:
              command:
                - find
                - "."
                - -name
                - kustomization.yaml
          generate:
            command:
              - bash
              - -c
              - |
                kustomize build . | argocd-vault-plugin generate -s argocd:argocd-secret -
          allowConcurrency: true
          lockRepo: false
