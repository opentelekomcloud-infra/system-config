# PostgreSQL Helm Chart - Preprod Configuration
# Security-focused configuration with ArgoCD Vault Plugin integration

global:
  defaultStorageClass: "csi-disk"

# Authentication configuration using ArgoCD Vault Plugin
auth:
  enablePostgresUser: true
  # Vault references for ArgoCD Vault Plugin - no manual secrets needed
  postgresPassword: "<path:secret/data/postgresql#postgres-password>"
  username: "<path:secret/data/postgresql#username>"
  password: "<path:secret/data/postgresql#user-password>"
  database: "<path:secret/data/postgresql#database>"
  replicationUsername: "<path:secret/data/postgresql#replication-username>"
  replicationPassword: "<path:secret/data/postgresql#replication-password>"
  usePasswordFiles: true

# pg_hba.conf configuration - custom authentication settings
pgHbaConfiguration: |
  # TYPE  DATABASE        USER            ADDRESS                 METHOD
  local   all             all                                     md5
  host    all             all             127.0.0.1/32            md5
  host    all             all             ::1/128                 md5
  host    all             all             0.0.0.0/0               md5
  hostssl all             all             0.0.0.0/0               md5
  host    replication     repl_user       0.0.0.0/0               md5

# Security hardening
image:
  pullPolicy: IfNotPresent
  debug: false

# Enable audit logging for security compliance
audit:
  logHostname: true
  logConnections: true
  logDisconnections: true
  pgAuditLog: "all"
  pgAuditLogCatalog: "on"
  clientMinMessages: "warning"
  logLinePrefix: "%m [%p] %q%u@%d "
  logTimezone: "UTC"

# TLS Configuration
tls:
  enabled: true
  autoGenerated: false
  preferServerCiphers: true
  certificatesSecret: "postgresql-tls"
  certFilename: "tls.crt"
  certKeyFilename: "tls.key"
  certCAFilename: "ca.crt"

# Primary database configuration
primary:
  name: primary

  # PostgreSQL configuration - use md5 to match pg_hba.conf
  configuration: |
    # Security settings
    ssl = on
    ssl_ciphers = 'HIGH:MEDIUM:!aNULL:!MD5'
    ssl_prefer_server_ciphers = on
    password_encryption = md5

    # Logging settings
    log_statement = 'all'
    log_min_duration_statement = 1000
    log_connections = on
    log_disconnections = on
    log_hostname = on
    log_line_prefix = '%m [%p] %q%u@%d '

    # Performance and security
    shared_preload_libraries = 'pgaudit'
    max_connections = 100
    shared_buffers = 256MB
    effective_cache_size = 1GB

  # Database initialization
  initdb:
    args: "--auth-host=md5 --auth-local=md5"
    scripts:
      01_init_database.sql: |
        -- Create zitadel database and user
        CREATE USER "zitadel" WITH PASSWORD '<path:secret/data/postgresql#user-password>';
        CREATE DATABASE "zitadel_db" OWNER "zitadel";
        GRANT ALL PRIVILEGES ON DATABASE "zitadel_db" TO "zitadel";

        -- Create replication user
        CREATE ROLE repl_user WITH REPLICATION LOGIN PASSWORD '<path:secret/data/postgresql#replication-password>';

        -- Enable pgaudit extension
        CREATE EXTENSION IF NOT EXISTS pgaudit;

  # Resource limits for security and stability
  resources:
    limits:
      memory: "2Gi"
      cpu: "1000m"
    requests:
      memory: "1Gi"
      cpu: "500m"

  # Security context
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
    runAsNonRoot: true
    seccompProfile:
      type: RuntimeDefault

  containerSecurityContext:
    enabled: true
    runAsUser: 1001
    runAsNonRoot: true
    allowPrivilegeEscalation: false
    capabilities:
      drop:
        - ALL
    seccompProfile:
      type: RuntimeDefault
    readOnlyRootFilesystem: true

  # Pod annotations for security scanning and config restart
  podAnnotations:
    container.apparmor.security.beta.kubernetes.io/postgresql: runtime/default
    seccomp.security.alpha.kubernetes.io/pod: runtime/default
    config/updated-at: "2025-09-17T09:00:00Z"

# Service configuration
service:
  type: ClusterIP
  ports:
    postgresql: 5432
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"

# Network policies for security isolation
networkPolicy:
  enabled: true
  allowExternal: false
  explicitNamespacesSelector: {}

# Persistence configuration
persistence:
  enabled: true
  storageClass: "csi-disk"
  accessModes:
    - ReadWriteOnce
  size: 50Gi
  annotations:
    volume.beta.kubernetes.io/storage-class: "csi-disk"

# Metrics and monitoring
metrics:
  enabled: true
  image:
    registry: docker.io
    repository: bitnami/postgres-exporter
    tag: "0.15.0-debian-12-r13"
    pullPolicy: IfNotPresent

  resources:
    limits:
      memory: "256Mi"
      cpu: "250m"
    requests:
      memory: "128Mi"
      cpu: "100m"

  service:
    type: ClusterIP
    port: 9187
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "9187"
      prometheus.io/path: "/metrics"

  serviceMonitor:
    enabled: true
    namespace: ""
    interval: 30s
    scrapeTimeout: 10s

# Service Account with minimal permissions
serviceAccount:
  create: true
  name: "postgresql-preprod"
  automountServiceAccountToken: false
  annotations:
    eks.amazonaws.com/role-arn: "<path:secret/data/postgresql/preprod#service-account-role-arn>"

# RBAC with minimal required permissions
rbac:
  create: true
  rules:
    - apiGroups: [""]
      resources: ["pods"]
      verbs: ["get", "list"]

# Backup configuration for data protection
backup:
  enabled: true
  cronjob:
    schedule: "0 2 * * *"
    historyLimit: 7
    restartPolicy: OnFailure
    storage:
      size: "10Gi"
      storageClassName: "csi-disk"

# Pod Disruption Budget for high availability
pdb:
  create: true
  minAvailable: 1

# Update strategy
updateStrategy:
  type: RollingUpdate
  rollingUpdate:
    partition: 0

# Additional security labels
commonLabels:
  app.kubernetes.io/component: "database"
  app.kubernetes.io/part-of: "zitadel-platform"
  security.policy/level: "high"

commonAnnotations:
  security.scan/last-scanned: "2025-09-17"
  compliance.regulation/gdpr: "true"
  backup.policy/retention: "30d"
