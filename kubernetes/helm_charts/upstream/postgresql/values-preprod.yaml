# PostgreSQL Helm Chart - Preprod Configuration
# Minimal working configuration
postgresql:
  global:
    defaultStorageClass: "csi-disk"

  # Authentication configuration using ArgoCD Vault Plugin
  auth:
    enablePostgresUser: true
    postgresPassword: "<path:secret/data/postgresql/admin#postgres-password>"
    usePasswordFiles: true

  # Security hardening
  image:
    pullPolicy: IfNotPresent
    debug: false

  # TLS Configuration - re-enabling to fix certificate issues
  tls:
    enabled: true
    autoGenerated: false
    preferServerCiphers: true
    certificatesSecret: "postgresql-tls"
    certFilename: "server.crt"
    certKeyFilename: "server.key"
    # certCAFilename: "ca.crt"  # Not needed - causes error if file missing

  # PostgreSQL Shared Preload Libraries for audit logging
  postgresqlSharedPreloadLibraries: "pgaudit"

  # Audit logging configuration (root level parameters)
  pgAuditLog: "all"
  pgAuditLogCatalog: "on"
  clientMinMessages: "warning"
  logLinePrefix: "%m [%p] %q%u@%d "
  logTimezone: "UTC"
  logConnections: true
  logDisconnections: true
  logHostname: true

  # TLS Configuration - temporarily disabled to resolve certificate path issues
  # tls:
  #   enabled: true
  #   autoGenerated: false
  #   preferServerCiphers: true
  #   certificatesSecret: "postgresql-tls"
  #   certFilename: "tls.crt"
  #   certKeyFilename: "tls.key"
  #   # certCAFilename: "ca.crt"  # Not needed - causes error if file missing

  # Primary database configuration
  primary:
    name: primary

    # pg_hba.conf configuration for authentication
    pgHbaConfiguration: |
      # TYPE  DATABASE        USER            ADDRESS                 METHOD
      local   all             all                                     md5
      host    all             all             127.0.0.1/32            md5
      host    all             all             ::1/128                 md5
      host    all             all             0.0.0.0/0               md5
      hostssl all             all             0.0.0.0/0               md5

    # PostgreSQL configuration with SSL enabled
    configuration: |
      # SSL settings with standard certificate filenames
      ssl = on
      ssl_cert_file = '/opt/bitnami/postgresql/certs/server.crt'
      ssl_key_file = '/opt/bitnami/postgresql/certs/server.key'
      ssl_prefer_server_ciphers = on
      
      # Basic security settings
      password_encryption = md5

      # Audit logging settings
      shared_preload_libraries = 'pgaudit'
      log_statement = 'all'
      log_min_duration_statement = 1000
      log_connections = on
      log_disconnections = on
      log_hostname = on
      log_line_prefix = '%m [%p] %q%u@%d '

      # Basic performance settings
      max_connections = 100
      shared_buffers = 256MB
      effective_cache_size = 1GB

    # Database initialization - use default args to avoid hanging
    # TODO: Add custom user creation once vault secrets are properly configured
    initdb:
      scripts:
        01_init_database.sql: |
          -- Create zitadel database and user using environment variables
          CREATE USER "${ZITADEL_USERNAME}" WITH PASSWORD '${ZITADEL_USER_PASSWORD}';
          CREATE DATABASE "${ZITADEL_DB_NAME}" OWNER "${ZITADEL_USERNAME}";
          GRANT ALL PRIVILEGES ON DATABASE "${ZITADEL_DB_NAME}" TO "${ZITADEL_USERNAME}";

          -- Create replication user using environment variables  
          CREATE ROLE "${REPL_USERNAME}" WITH REPLICATION LOGIN PASSWORD '${REPL_USER_PASSWORD}';

          -- Enable pgaudit extension
          CREATE EXTENSION IF NOT EXISTS pgaudit;
    # initdb:
    #   args: "--auth-host=md5 --auth-local=md5"

    # Extra environment variables for user creation
    extraEnvVars:
      - name: ZITADEL_USER_PASSWORD
        value: "<path:secret/data/postgresql/zitadel#user-password>"
      - name: ZITADEL_DB_NAME
        value: "<path:secret/data/postgresql/zitadel#database>"
      - name: ZITADEL_USERNAME
        value: "<path:secret/data/postgresql/zitadel#username>"
      - name: REPL_USER_PASSWORD
        value: "<path:secret/data/postgresql/zitadel#replication-password>"
      - name: REPL_USERNAME
        value: "<path:secret/data/postgresql/zitadel#replication-username>"

    # Security context
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      runAsUser: 1001
      runAsNonRoot: true

    containerSecurityContext:
      enabled: true
      runAsUser: 1001
      runAsNonRoot: true
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Keep false for PostgreSQL to work

    # Resource limits for security and stability
    resources:
      limits:
        memory: "2Gi"
        cpu: "1000m"
      requests:
        memory: "1Gi"
        cpu: "500m"

    # Persistence configuration
    persistence:
      enabled: true
      storageClass: "csi-disk"
      accessModes:
        - ReadWriteOnce
      size: 50Gi

  # Service configuration
  service:
    type: ClusterIP
    ports:
      postgresql: 5432

  # Metrics and monitoring
  metrics:
    enabled: true
    image:
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: "0.15.0-debian-12-r13"
      pullPolicy: IfNotPresent

    resources:
      limits:
        memory: "256Mi"
        cpu: "250m"
      requests:
        memory: "128Mi"
        cpu: "100m"

    service:
      type: ClusterIP
      port: 9187
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"

    serviceMonitor:
      enabled: true
      namespace: ""
      interval: 30s
      scrapeTimeout: 10s

  # Backup configuration for data protection
  backup:
    enabled: true
    cronjob:
      schedule: "0 2 * * *"  # Daily at 2 AM
      historyLimit: 7
      restartPolicy: OnFailure
      storage:
        size: "10Gi"
        storageClassName: "csi-disk"

  # Pod Disruption Budget for high availability
  pdb:
    create: true
    minAvailable: 1
