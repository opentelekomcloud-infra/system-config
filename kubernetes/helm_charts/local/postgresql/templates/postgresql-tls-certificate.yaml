apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: postgresql-tls
  namespace: {{ .Values.namespace }}
spec:
  secretName: postgresql-tls
  issuerRef:
    group: cert-manager.io
    kind: ClusterIssuer
    name: {{ .Values.clusterIssuerName }}
  commonName: {{ .Values.commonName }}
  dnsNames:
    {{- range .Values.dnsNames }}
    - {{ . }}
    {{- end }}
  # Enable the inclusion of CA certificate chain
  usages:
    - digital signature
    - key encipherment
    - server auth
  # Request full certificate chain including CA
  secretTemplate:
    labels:
      app.kubernetes.io/name: postgresql
      app.kubernetes.io/component: tls-certificate
    annotations:
      cert-manager.io/certificate-name: postgresql-tls
---
# Job to extract CA certificate from the chain
apiVersion: batch/v1
kind: Job
metadata:
  name: postgresql-ca-extractor-{{ randAlphaNum 5 | lower }}
  namespace: {{ .Values.namespace }}
  labels:
    app.kubernetes.io/name: postgresql
    app.kubernetes.io/component: ca-extractor
spec:
  ttlSecondsAfterFinished: 300
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgresql
        app.kubernetes.io/component: ca-extractor
    spec:
      restartPolicy: OnFailure
      containers:
      - name: ca-extractor
        image: bitnami/kubectl:latest
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "Waiting for certificate secret to be ready..."
          kubectl wait --for=condition=Ready certificate/postgresql-tls --timeout=300s
          
          echo "Extracting CA certificate from certificate chain..."
          
          # Get the certificate chain
          CERT_CHAIN=$(kubectl get secret postgresql-tls -o jsonpath='{.data.tls\.crt}' | base64 -d)
          
          # Extract the CA certificate (second certificate in the chain)
          CA_CERT=$(echo "$CERT_CHAIN" | awk '/-----BEGIN CERTIFICATE-----/{p++} p==2{print} /-----END CERTIFICATE-----/ && p==2{exit}')
          
          # Create or update the secret with CA certificate
          kubectl patch secret postgresql-tls -p "{\"data\":{\"ca.crt\":\"$(echo "$CA_CERT" | base64 -w 0)\"}}"
          
          echo "CA certificate added to postgresql-tls secret successfully"
      serviceAccountName: postgresql-ca-extractor
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: postgresql-ca-extractor
  namespace: {{ .Values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: postgresql-ca-extractor
  namespace: {{ .Values.namespace }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "patch", "update"]
- apiGroups: ["cert-manager.io"]
  resources: ["certificates"]
  verbs: ["get", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: postgresql-ca-extractor
  namespace: {{ .Values.namespace }}
subjects:
- kind: ServiceAccount
  name: postgresql-ca-extractor
  namespace: {{ .Values.namespace }}
roleRef:
  kind: Role
  name: postgresql-ca-extractor
  apiGroup: rbac.authorization.k8s.io
