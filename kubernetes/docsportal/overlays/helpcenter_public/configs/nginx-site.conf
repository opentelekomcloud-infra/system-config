log_format json_analytics escape=json '{'
      '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
      '"connection": "$connection", ' # connection serial number
      '"connection_requests": "$connection_requests", ' # number of requests made in connection
      '"pid": "$pid", ' # process pid
      '"request_id": "$request_id", ' # the unique request id
      '"request_length": "$request_length", ' # request length (including headers and body)
      '"remote_addr": "$remote_addr", ' # client IP
      '"remote_user": "$remote_user", ' # client HTTP username
      '"remote_port": "$remote_port", ' # client port
      '"time_local": "$time_local", '
      '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
      '"request": "$request", ' # full path no arguments if the request
      '"request_uri": "$request_uri", ' # full path and arguments if the request
      '"args": "$args", ' # args
      '"status": "$status", ' # response status code
      '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
      '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
      '"http_referer": "$http_referer", ' # HTTP referer
      '"http_user_agent": "$http_user_agent", ' # user agent
      '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
      '"http_host": "$http_host", ' # the request Host: header
      '"server_name": "$server_name", ' # the name of the vhost serving the request
      '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
      '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
      '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
      '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
      '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
      '"upstream_response_length": "$upstream_response_length", ' # upstream response length
      '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
      '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
      '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
      '"scheme": "$scheme", ' # http or https
      '"request_method": "$request_method", ' # request method
      '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
      '"pipe": "$pipe", ' # "p" if request was pipelined, "." otherwise
      '"gzip_ratio": "$gzip_ratio", '
      '"http_cf_ray": "$http_cf_ray",'
      '}';

upstream backend {
  #this is one of the swift proxy server
  server swift.eco.tsi-dev.otc-service.com:443;
}

map_hash_max_size 2048;
map_hash_bucket_size 2048;
map $request_uri $request_uri_path {
  "~^(?P<path>[^?]*)(\?.*)?$"  $path;
}

map $request_uri_path $new_uri {
  default "";
  include /etc/nginx/redirect/additional-resources;
  include /etc/nginx/redirect/anti-ddos;
  include /etc/nginx/redirect/application-operations-management;
  include /etc/nginx/redirect/auto-scaling;
  include /etc/nginx/redirect/bare-metal-server;
  include /etc/nginx/redirect/cloud-backup-recovery;
  include /etc/nginx/redirect/cloud-container-engine;
  include /etc/nginx/redirect/cloud-eye;
  include /etc/nginx/redirect/cloud-search-service;
  include /etc/nginx/redirect/cloud-server-backup-service;
  include /etc/nginx/redirect/cloud-trace-service;
  include /etc/nginx/redirect/data-ingestion-service;
  include /etc/nginx/redirect/data-replication-service;
  include /etc/nginx/redirect/data-warehouse-service-1;
  include /etc/nginx/redirect/data-warehouse-service-2;
  include /etc/nginx/redirect/data-warehouse-service-3;
  include /etc/nginx/redirect/dedicated-host;
  include /etc/nginx/redirect/direct-connect;
  include /etc/nginx/redirect/distributed-cache-service;
  include /etc/nginx/redirect/distributed-message-service;
  include /etc/nginx/redirect/document-database-service;
  include /etc/nginx/redirect/domain-name-service;
  include /etc/nginx/redirect/elastic-cloud-server;
  include /etc/nginx/redirect/elastic-ip;
  include /etc/nginx/redirect/elastic-load-balancing;
  include /etc/nginx/redirect/elastic-volume-service;
  include /etc/nginx/redirect/gaussdb-mysql;
  include /etc/nginx/redirect/gaussdb-nosql;
  include /etc/nginx/redirect/gaussdb-opengauss;
  include /etc/nginx/redirect/identity-access-management;
  include /etc/nginx/redirect/image-management-service;
  include /etc/nginx/redirect/key-management-service;
  include /etc/nginx/redirect/log-tank-service;
  include /etc/nginx/redirect/mapreduce-service-aa;
  include /etc/nginx/redirect/mapreduce-service-ab;
  include /etc/nginx/redirect/mapreduce-service-ac;
  include /etc/nginx/redirect/mapreduce-service-ad;
  include /etc/nginx/redirect/mapreduce-service-ae;
  include /etc/nginx/redirect/mapreduce-service-af;
  include /etc/nginx/redirect/mapreduce-service-ag;
  include /etc/nginx/redirect/modelarts;
  include /etc/nginx/redirect/nat-gateway;
  include /etc/nginx/redirect/object-storage-service;
  include /etc/nginx/redirect/private-link-access-service;
  include /etc/nginx/redirect/relational-database-service;
  include /etc/nginx/redirect/resource-management-service;
  include /etc/nginx/redirect/resource-template-service;
  include /etc/nginx/redirect/scalable-file-service;
  include /etc/nginx/redirect/simple-message-notification;
  include /etc/nginx/redirect/software-repository-container;
  include /etc/nginx/redirect/storage-disaster-recovery-service;
  include /etc/nginx/redirect/tag-management-service;
  include /etc/nginx/redirect/virtual-private-cloud;
  include /etc/nginx/redirect/virtual-private-network;
  include /etc/nginx/redirect/volume-backup-service;
  include /etc/nginx/redirect/vpc-endpoint;
  include /etc/nginx/redirect/web-application-firewall-dedicated;
  include /etc/nginx/redirect/web-application-firewall;
}

# server_names_hash_bucket_size 128;
server {
  # skip some normal config like listen, log
  listen 8080;
  server_name docs.otc.t-systems.com;
  access_log /dev/stdout json_analytics;
  error_log /dev/stdout debug;
  # set proxy cache config, you can find all these command in nginx wiki page
  proxy_set_header Host $host;
  proxy_set_header Accept "*/*";
  proxy_read_timeout 120;
  proxy_send_timeout 120;
  proxy_intercept_errors on;
  # set a return http header of cache status, so that you can see the status of file cache
  add_header X-Cache $upstream_cache_status;

  error_page 401 404 /custom_404.html;

  location = /custom_404.html {
    root /usr/share/nginx/html;
    internal;
  }

  location / {
    set $container 'docsportal';
    set $account 'AUTH_3339cc81c5a644a691fe76fd4f199190';
    set $index_uri '/index.html';

    if ($new_uri != "") {
      #rewrite based on redirect.map mapper
      rewrite ^(.*)$ https://$server_name$new_uri permanent;
      break;
    }

    if ($request_uri_path ~* '/developer/((?!_static).*)$') {
      # developer is a subfolder in docsportal
      set $index_uri '/developer/$1';
      break;
    }
    if ($request_uri_path ~* '/developer/_static/(.*)$') {
      # developer is a subfolder in docsportal
      set $index_uri '/_static/$1';
      break;
    }
     if ($request_uri_path ~* '/additional/((?!_static).*)$') {
      # additional is a subfolder in docsportal
      set $index_uri '/additional/$1';
      break;
    }
    if ($request_uri_path ~* '/releasenotes(/?)$') {
      # overridden releasenotes index from docsportal
      set $index_uri '/releasenotes/index.html';
      break;
    }
    if ($request_uri_path ~* '/releasenotes/(.*)$') {
      # rn itself
      set $container 'releasenotes';
      set $index_uri '/$1';
      break;
    }
    if ($request_uri_path ~* '(^/_static)|(^/_images)') {
      # statics from docportal
      set $index_uri $request_uri;
      break;
    }
    if ($request_uri_path ~* '^/([\w\d\-_]+)\.(.*)$') {
      # root files from docsportal
      set $index_uri '/$1.$2';
      break;
    }
    if ($request_uri_path ~* '^/([^\/]+)\/?(.*)$') {
      # general project docs
      set $container $1;
      set $index_uri '/$2';
    }
    # append / at the end
    rewrite ^(/[^./]+)$ https://$server_name$1/ break;

    if ($request_uri = '/') {
      set $index_uri '/index.html';
    }
    if ($request_uri = '') {
      set $index_uri '/index.html';
    }

    proxy_pass https://backend/v1/$account/$container$index_uri;
    # If we get 30x back from backend - rewrite it again to something we would understand
    proxy_redirect ~*/v1/AUTH_3339cc81c5a644a691fe76fd4f199190/(.*)$ https://docs.otc.t-systems.com/$1;
  }
}
