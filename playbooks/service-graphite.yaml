- hosts: "graphite:!disabled"
  name: "Base: configure graphite"
  become: true
  roles:
    # Group should be responsible for defining open ports
    - firewalld
  tasks:

    # host/group should have "graphite_instance_group" var with the name of the group
    # graphite node should become member of (relay will be configired with all
    # hosts from this group)
    - block:
      - name: Construct cluster destination lists
        ansible.builtin.set_fact:
          cluster_hosts: "{{ (cluster_hosts|default([])) + [(hostvars[item]['ansible_host'] + ':8080')] }}"
          relay_destinations: "{{ (relay_destinations|default([])) + [(hostvars[item]['ansible_host'] + ':2004')] }}"
          aggregate_destinations: "{{ (aggregate_destinations|default([])) + [(hostvars[item]['ansible_host'] + ':2004')] }}"
        loop: "{{ groups[(graphite_instance_group | default('graphite'))] | list }}"

      - name: Construct cluster memcache lists
        ansible.builtin.set_fact:
          memcache_hosts: "{{ (memcache_hosts|default([])) + [(hostvars[item]['ansible_host'] + ':11211')] }}"
        loop: "{{ groups['memcached'] | list }}"

      - name: Join cluster destination lists
        ansible.builtin.set_fact:
          graphite_relay_destinations: "{{ relay_destinations|join(', ') }}"
          graphite_aggregate_destinations: "{{ aggregate_destinations|join(', ') }}"
          graphite_cluster_servers: "{{ cluster_hosts|join(', ') }}"
          graphite_cluster_memcache_hosts: "{{ memcache_hosts|join(', ') }}"
          graphite_relay: true
      when:
        - "graphite_instance_group is defined and graphite_instance_group|length"

    - include_role: name=graphite

    - name: Create /opt/graphite/conf
      ansible.builtin.file:
        dest: "/opt/graphite/conf"
        state: "directory"

    - name: Create /root/bin directory
      ansible.builtin.file:
        dest: "/root/bin"
        state: "directory"

    - name: Write carbonate config
      ansible.builtin.copy:
        content: "{{ lookup('template', 'templates/graphite/carbonate.conf.j2') }}"
        dest: "/opt/graphite/conf/carbonate.conf"

    - name: Write carbonate tool scrips
      ansible.builtin.copy:
        content: "{{ lookup('template', 'templates/graphite/' + item + '.j2') }}"
        dest: "/root/bin/{{ item }}"
        mode: "0755"
      loop:
        - "graphite_resync_node.sh"
        - "graphite_list_foreign_metrics.sh"

    - name: Install carbonate tools
      ansible.builtin.pip:
        name: "carbonate"

- hosts: "graphite-web:!disabled"
  name: "Base: configure graphite web app"
  become: true
  roles:
    # Group should be responsible for defining open ports
    - firewalld
  tasks:

    # host/group should have "graphite_instance_group" var with the name of the group
    # graphite node should become member of (relay will be configired with all
    # hosts from this group)
    - block:
      - name: Construct cluster destination lists
        ansible.builtin.set_fact:
          cluster_hosts: "{{ (cluster_hosts|default([])) + [(hostvars[item]['ansible_host'] + ':8080')] }}"
        loop: "{{ groups[(graphite_instance_group | default('graphite'))] | list }}"

      - name: Construct cluster memcache lists
        ansible.builtin.set_fact:
          memcache_hosts: "{{ (memcache_hosts|default([])) + [(hostvars[item]['ansible_host'] + ':11211')] }}"
        loop: "{{ groups['memcached'] | list }}"

      - name: Join cluster destination lists
        ansible.builtin.set_fact:
          graphite_cluster_servers: "{{ cluster_hosts | join(', ') }}"
          graphite_cluster_memcache_host: "{{ (memcache_hosts|default([])) | join(', ') }}"
      when:
        - "graphite_instance_group is defined and graphite_instance_group|length"

    - include_role: name=graphite_web

- hosts: bridge.eco.tsi-dev.otc-service.com:!disabled
  #- hosts: localhost
  name: "Configure Graphite-web in K8s"
  tasks:
    - include_role:
        name: graphite_web_k8s
      vars:
        graphite: "{{ graphite_web_instances[item.graphite_web_instance] }}"
        instance: "{{ item.instance }}"
        context: "{{ item.context }}"
        namespace: "{{ item.namespace }}"
        cr_spec: "{{ item.cr_spec }}"
      loop: "{{ graphite_web_k8s_instances | list }}"
