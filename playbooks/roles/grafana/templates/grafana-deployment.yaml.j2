apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: "grafana"
    app.kubernetes.io/instance: "{{ instance }}"
    app.kubernetes.io/managed-by: "system-config"
spec:
  replicas: {{ grafana.grafana_deployment_count | int }}
  selector:
    matchLabels:
      app.kubernetes.io/name: "grafana"
      app.kubernetes.io/instance: "{{ instance }}"
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/name: "grafana"
        app.kubernetes.io/instance: "{{ instance }}"
    spec:
      hostAliases:
{% if grafana.grafana_ldap_server_ip is defined and grafana.grafana_ldap_server_ip|length %}
      - ip: "{{ grafana.grafana_ldap_server_ip }}"
        hostnames:
        - "ldap.otc-service.internal"
{% endif %}
      - ip: "127.0.0.1"
        hostnames:
        - "{{ grafana.fqdn }}"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: "app.kubernetes.io/instance"
                  operator: In
                  values:
                  - "{{ instance }}"
              topologyKey: kubernetes.io/hostname
      serviceAccountName: "{{ grafana_service_account_name }}"
      initContainers:
        - args:
            - agent
            - -config=/etc/vault/vault-agent-config.hcl
            - -log-level=debug
            - -exit-after-auth=true
          env:
            - name: "VAULT_ADDR"
              value: "{{ ansible_hashi_vault_addr }}"
{% if grafana.vault_skip_setcap is defined and grafana.vault_skip_setcap %}
            - name: "SKIP_SETCAP"
              value: "true"
{% endif %}
          image: "{{ grafana.vault_image }}"
          name: "vault-agent"
          volumeMounts:
            - mountPath: "/etc/vault"
              name: "vault-agent-config"
            - mountPath: /var/run/secrets/tokens
              name: k8-tokens
            - mountPath: "/vault-data"
              name: "vault-data"
      containers:
      - args:
          - agent
          - -config=/etc/vault/vault-agent-config.hcl
          - -log-level=debug
          - -exit-after-auth=false
        env:
          - name: "VAULT_ADDR"
            value: "{{ ansible_hashi_vault_addr }}"
{% if grafana.vault_skip_setcap is defined and grafana.vault_skip_setcap %}
          - name: "SKIP_SETCAP"
            value: "true"
{% endif %}
        image: "{{ grafana.vault_image }}"
        name: "vault-agent-sidecar"
        volumeMounts:
          - mountPath: "/etc/vault"
            name: "vault-agent-config"
          - mountPath: /var/run/secrets/tokens
            name: k8-tokens
          - mountPath: "/vault-data"
            name: "vault-data"
      - image: "{{ grafana.grafana_renderer_image }}" 
        name: "grafana-renderer"
        ports:
        - containerPort: 8081
{% if grafana.renderer_deployment_resources is defined and grafana.renderer_deployment_resources|length %}
        resources:
{% for key, value in grafana.renderer_deployment_resources.items() %}
          {{ key }}:
{% for key2, value2 in value.items() %}
            {{ key2 }}: {{ value2 }}
{% endfor %}
{% endfor %}
{% endif %}
      - image: "{{ grafana.grafana_image }}"
        name: grafana
        ports:
        - containerPort: 3000
{% if grafana.grafana_deployment_resources is defined %}
        resources:
{% for key, value in grafana.grafana_deployment_resources.items() %}
          {{ key }}:
{% for key2, value2 in value.items() %}
            {{ key2 }}: {{ value2 }}
{% endfor %}
{% endfor %}
{% endif %}
        readinessProbe:
          httpGet:
            path: /login
            scheme: HTTP
            port: 3000
        livenessProbe:
          httpGet:
            path: /healthz
            scheme: HTTP
            port: 3000
        env:
          - name: GF_RENDERING_SERVER_URL
            value: http://localhost:8081/render
          - name: GF_RENDERING_CALLBACK_URL
            value: http://{{ grafana.fqdn }}:3000
{% if (grafana.grafana_plugins is defined and grafana.grafana_plugins|length) %}
          - name: GF_INSTALL_PLUGINS
            value: "{{ grafana.grafana_plugins }}"
{% endif %}
        envFrom:
        - secretRef:
            name: "{{ grafana_secret_name }}"
        volumeMounts:
        - mountPath: "/vault-data"
          name: "vault-data"
{% if (grafana.grafana_ldap_enable is defined and grafana.grafana_ldap_enable) %}
        - name: grafana-config-ldap
          mountPath: /etc/grafana/ldap
{% endif %}
      volumes:
{% if (grafana.grafana_ldap_enable is defined and grafana.grafana_ldap_enable) %}
      - configMap:
          name: "{{ grafana_config_name }}"
          items:
            - key: ldap.toml
              path: ldap.toml
        name: grafana-config-ldap
{% endif %}
      - configMap:
          name: "{{ grafana_config_name }}"
          items:
            - key: vault-agent-config.hcl
              path: vault-agent-config.hcl
        name: vault-agent-config
      - name: k8-tokens
        projected:
          defaultMode: 420
          sources:
          - serviceAccountToken:
              expirationSeconds: 7200
              path: vault-token
      - emptyDir: {}
        name: vault-data
status: {}
