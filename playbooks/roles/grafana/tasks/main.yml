---
- name: Include variables
  include_vars: "{{ lookup('first_found', params) }}"
  vars:
    params:
      files: "{{ distro_lookup_path }}"
      paths:
        - "vars"

- name: Install required packages
  become: true
  ansible.builtin.package:
    state: present
    name: "{{ item }}"
  loop:
    - "{{ packages }}"
  when: "ansible_facts.pkg_mgr != 'atomic_container'"
  register: task_result
  until: task_result is success
  retries: 5

- name: Create Grafana group
  become: true
  ansible.builtin.group:
    name: "{{ grafana_os_user }}"
    state: present

- name: Create Grafana user for docker/podman
  become: true
  ansible.builtin.user:
    name: "{{ grafana_os_user }}"
    group: "{{ grafana_os_group }}"
    groups: "{{ 'docker' if container_command == 'docker' else '' }}"
    state: present

- name: Create required directories
  become: true
  file:
    path: "{{ item.dest }}"
    state: directory
    owner: "{{ grafana_os_user }}"
    group: "{{ grafana_os_group }}"
    mode: "{{ item.mode | default(omit) }}"
  loop:
    - {dest: "/etc/grafana"}
    - {dest: "/etc/grafana/provisioning"}
    - {dest: "/etc/grafana/ldap"}

- name: Write Grafana config env file
  become: true
  template:
    src: "env.j2"
    dest: "/etc/grafana/env"
    owner: "{{ grafana_os_user }}"
    group: "{{ grafana_os_group }}"
    mode: 0664

- name: Write Grafana ldap conf file
  become: true
  ansible.builtin.copy:
    content: "{{ grafana_ldap_config }}"
    dest: "/etc/grafana/ldap/ldap.toml"
    owner: "{{ grafana_os_user }}"
    group: "{{ grafana_os_group }}"
    mode: 0664
  when: 
    - grafana_ldap_config is defined 
    - grafana_ldap_config |length > 0

- name: Write Grafana ldap root CA file
  become: true
  copy:
    content: "{{ grafana.grafana_auth_ldap_certificate | default(grafana.default.grafana_auth_ldap_certificate) }}"
    dest: "/etc/grafana/ldap/ldap-certificate.crt"
    owner: "{{ grafana_os_user }}"
    group: "{{ grafana_os_group }}"
    mode: 0664
  when:  
    - (grafana.grafana_auth_ldap_certificate is defined and grafana.grafana_auth_ldap_certificate |length > 0)  or (grafana.default.grafana_auth_ldap_certificate is defined and grafana.default.grafana_auth_ldap_certificate |length > 0)

- name: Write Grafana Image Renderer Systemd unit file
  become: true
  template:
    src: "grafana-renderer.service.j2"
    dest: "/etc/systemd/system/grafana-renderer.service"
  when: 
    - (grafana.grafana_enable_renderer is defined and grafana.grafana_enable_renderer) or (grafana.grafana_enable_renderer is undefined and grafana.default.grafana_enable_renderer) 
  notify:
    - restart grafana-renderer

- name: Write Grafana Systemd unit file
  become: true
  template:
    src: "grafana.service.j2"
    dest: "/etc/systemd/system/grafana.service"
  notify:
    - restart grafana

- name: Force all notified handlers to run at this point, not waiting for normal sync points
  meta: flush_handlers

- name: Make sure the Grafana service started
  become: true
  systemd:
    state: started
    name: "grafana.service"

- name: Wait for grafana container to listen 
  become: true
  wait_for:
    host: 0.0.0.0
    port: 3000
    timeout: 120

- name: Install Grafana plugins 
  become: true
  become_user: "{{ grafana_os_user }}"
  command: "{{ container_command }} exec grafana grafana-cli plugins install {{ item }}"
  loop: "{{ grafana.default.grafana_plugins }}"
  notify:
    - restart grafana

