- name: Check {{ vault_secret_path }} certificate in Vault
  community.hashi_vault.vault_read:
    url: "{{ ansible_hashi_vault_addr }}"
    token: "{{ ansible_hashi_vault_token }}"
    path: "{{ vault_secret_path }}"
  register: cert_in_vault
  failed_when: false

- name: Check certificate validity
  community.crypto.x509_certificate_info:
    content: "{{ cert_in_vault.data.data.data.certificate }}"
    valid_at:
      point_1: "+30d"
  register: cert_info
  when: "cert_in_vault.data is defined"

- name: Make sure alt_names_str is empty - in loop with include_role this can be already set to unwanted value
  ansible.builtin.set_fact:
    alt_names_str: ""

- name: Construct alt_names value
  ansible.builtin.set_fact:
    alt_names_str: "{{ alt_names | join(',') }}"
  when:
    - "alt_names is defined"
    - "alt_names is iterable"
    - "alt_names is not match('__omit')"

- name: Issue certificate
  ansible.builtin.uri:
    url: "{{ ansible_hashi_vault_addr }}/v1/{{ vault_pki_path }}/issue/{{ vault_pki_role }}"
    method: "POST"
    headers:
      X-Vault-Token: "{{ ansible_hashi_vault_token }}"
    body:
      common_name: "{{ common_name }}"
      alt_names: "{{ alt_names_str | default(omit) }}"
      private_key_format: "{{ private_key_format | default(omit) }}"
    body_format: "json"
  when: "cert_in_vault.data is not defined or not cert_info.valid_at.point_1"
  register: "cert"

- name: Save certificate in Vault
  ansible.builtin.uri:
    url: "{{ ansible_hashi_vault_addr }}/v1/{{ vault_secret_path }}"
    method: "POST"
    headers:
      X-Vault-Token: "{{ ansible_hashi_vault_token }}"
    body:
      data:
        certificate: "{{ cert.json.data.certificate }}"
        private_key: "{{ cert.json.data.private_key }}"
    body_format: "json"
  when:
    - "cert.json is defined"
