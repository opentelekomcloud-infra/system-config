---
- name: Create Document Hosting {{ instance }} Namespace
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    name: "{{ namespace }}"
    api_version: "v1"
    kind: "Namespace"

- name: Create Document Hosting {{ instance }} Config
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_cm_name }}"
    kind: "ConfigMap"
    api_version: "v1"
    apply: "yes"
    definition:
      metadata:
        labels:
          app.kubernetes.io/name: "document-hosting"
          app.kubernetes.io/instance: "{{ instance }}"
          app.kubernetes.io/managed-by: "system-config"
      data:
        nginx-site.conf: "{{ lookup('template', (document_hosting.nginx_template | default('nginx-site.conf.j2'))) }}"
        custom_404.html: "{{ lookup('template', 'custom_404.html.j2') }}"
  register: doc_cm

- name: Create Document Hosting {{ instance }} redirect map if requested
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ redirect_item.key }}"
    kind: "ConfigMap"
    api_version: "v1"
    apply: "yes"
    server_side_apply:
      field_manager: "ansible"
    definition:
      metadata:
        labels:
          app.kubernetes.io/name: "document-hosting"
          app.kubernetes.io/instance: "{{ instance }}"
          app.kubernetes.io/managed-by: "system-config"
          redirect_map: "true"
      data: "{{ { redirect_item.key : lookup('ansible.builtin.file', redirect_item.value) } }}"
  loop: "{{ document_hosting.redirect_maps | dict2items }}"
  loop_control:
    loop_var: "redirect_item"
  when: "document_hosting.redirect_maps is defined and document_hosting.redirect_maps"

- name: Create Document Hosting {{ instance }} TLS Certs Secret
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_ssl_cert_name}}"
    api_version: "v1"
    kind: "Secret"
    apply: "yes"
    definition:
      metadata:
        labels:
          app.kubernetes.io/app: "document-hosting"
          app.kubernetes.io/instance: "{{ instance }}"
          app.kubernetes.io/managed-by: "system-config"
      data:
        tls.crt: "{{ lookup('file', '/etc/ssl/{{ inventory_hostname }}/{{ document_hosting.cert }}-fullchain.crt') | string | b64encode }}"
        tls.key: "{{ lookup('file', '/etc/ssl/{{ inventory_hostname }}/{{ document_hosting.cert }}.pem') | string | b64encode }}"
  when: "document_hosting.cert is defined"

- name: Create {{ instance }} ServiceAccount
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_service_account_name }}"
    api_version: "v1"
    kind: "ServiceAccount"
    apply: "yes"

- name: Create {{ instance }} Role
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_service_account_name }}-role"
    api_version: "rbac.authorization.k8s.io/v1"
    kind: "Role"
    definition:
      rules:
        - apiGroups: ["*"]
          resources: ["configmaps"]
          verbs: ["get", "watch", "list"]
  when: "document_hosting.redirect_maps is defined and document_hosting.redirect_maps"

- name: Create {{ instance }} SA binding
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_service_account_name }}-{{ instance }}-cm-read"
    api_version: "rbac.authorization.k8s.io/v1"
    kind: "RoleBinding"
    definition:
      subjects:
        - kind: "ServiceAccount"
          name: "{{ document_hosting_service_account_name }}"
          namespace: "{{ namespace }}"
      roleRef:
        kind: "Role"
        name: "{{ document_hosting_service_account_name }}-role"
        apiGroup: "rbac.authorization.k8s.io"
  when: "document_hosting.redirect_maps is defined and document_hosting.redirect_maps"

- name: Create Document Hosting {{ instance }} Deployment
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_dep_name }}"
    api_version: "apps/v1"
    kind: "Deployment"
    apply: "yes"
    definition:
      metadata:
        labels:
          app.kubernetes.io/name: "document-hosting"
          app.kubernetes.io/instance: "{{ instance }}"
          app.kubernetes.io/managed-by: "system-config"
        annotations:
          cm-version: "{{ doc_cm.result.metadata.resourceVersion }}"
      spec:
        selector:
          matchLabels:
            app.kubernetes.io/name: "document-hosting"
            app.kubernetes.io/instance: "{{ instance }}"
        template:
          metadata:
            labels:
              app.kubernetes.io/name: "document-hosting"
              app.kubernetes.io/instance: "{{ instance }}"
            annotations:
              cm-version: "{{ doc_cm.result.metadata.resourceVersion }}"
          spec:
            containers:
              - name: "document-hosting"
                image: "{{ document_hosting.image }}"
                ports:
                  - name: http
                    containerPort: 8080
                    protocol: TCP
                livenessProbe:
                  httpGet:
                    path: /
                    port: http
                readinessProbe:
                  httpGet:
                    path: /
                    port: http
                resources: "{{ document_hosting_resources | default(omit) }}"
                volumeMounts:
                  - name: nginx-config
                    mountPath: /etc/nginx/conf.d/
                  - name: nginx-config
                    mountPath: /usr/share/nginx/html/custom_404.html
                    subPath: custom_404.html
                  - name: nginx-config
                    mountPath: /etc/nginx/redirect.map
                    subPath: redirect.map
                  - mountPath: /etc/nginx/redirect
                    name: redirect-map-volume
              - env:
                  - name: METHOD
                    value: WATCH
                  - name: LABEL
                    value: redirect_map
                  - name: LABEL_VALUE
                    value: "true"
                  - name: FOLDER
                    value: /tmp/redirect
                  - name: RESOURCE
                    value: configmap
                image: "{{ document_hosting.kiwigrid_image }}"
                name: redirect-configmap-sync
                volumeMounts:
                  - mountPath: /tmp/redirect
                    name: redirect-map-volume
            serviceAccountName: "{{ document_hosting_service_account_name }}"
            volumes:
              - configMap:
                  name: "{{ document_hosting_cm_name }}"
                  defaultMode: 420
                name: nginx-config
              - emptyDir: {}
                name: redirect-map-volume
            affinity:
              podAntiAffinity:
                preferredDuringSchedulingIgnoredDuringExecution:
                  - weight: 100
                    podAffinityTerm:
                      labelSelector:
                        matchExpressions:
                          - key: "app.kubernetes.io/instance"
                            operator: In
                            values:
                              - "{{ instance }}"
                          - key: "app.kubernetes.io/name"
                            operator: In
                            values:
                              - "document-hosting"
                      topologyKey: kubernetes.io/hostname

- name: Create Document Hosting {{ instance }} Autoscaler
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_hpa_name }}"
    api_version: "autoscaling/v2beta2"
    kind: "HorizontalPodAutoscaler"
    apply: "yes"
    definition:
      metadata:
        labels:
          app.kubernetes.io/name: "document-hosting"
          app.kubernetes.io/instance: "{{ instance }}"
          app.kubernetes.io/managed-by: "system-config"
      spec:
        scaleTargetRef:
          kind: "Deployment"
          name: "{{ document_hosting_dep_name }}"
          apiVersion: "apps/v1"
        minReplicas: 1
        maxReplicas: 5
        metrics:
          - type: "Resource"
            resource:
              name: "cpu"
              target:
                type: "Utilization"
                averageUtilization: 70

- name: Create Document Hosting {{ instance }} Service
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_svc_name }}"
    kind: "Service"
    api_version: "v1"
    apply: "yes"
    definition:
      metadata:
        labels:
          app.kubernetes.io/name: "document-hosting"
          app.kubernetes.io/instance: "{{ instance }}"
          app.kubernetes.io/managed-by: "system-config"
      spec:
        type: "ClusterIP"
        ports:
          - name: http
            port: 8080
            protocol: "TCP"
            targetPort: 8080
        selector:
          app.kubernetes.io/name: "document-hosting"
          app.kubernetes.io/instance: "{{ instance }}"

- name: Create Document Hosting {{ instance }} Ingress
  kubernetes.core.k8s:
    context: "{{ context }}"
    state: "{{ state }}"
    namespace: "{{ namespace }}"
    name: "{{ document_hosting_ing_name }}"
    api_version: "networking.k8s.io/v1"
    kind: "Ingress"
    apply: "yes"
    definition:
      metadata:
        labels:
          app.kubernetes.io/name: "document-hosting"
          app.kubernetes.io/instance: "{{ instance }}"
          app.kubernetes.io/managed-by: "system-config"
        annotations:
          cert-manager.io/cluster-issuer: "{{ document_hosting.cluster_issuer | default(omit) }}"
      spec:
        ingressClassName: "{{ document_hosting.ingress_class | default(omit) }}"
        tls:
          - hosts:
              - "{{ document_hosting.server_name }}"
            secretName: "{{ document_hosting_ssl_cert_name }}"
        rules:
          - host: "{{ document_hosting.server_name }}"
            http:
              paths:
                - path: "/"
                  pathType: "Prefix"
                  backend:
                    service:
                      name: "{{ document_hosting_svc_name }}"
                      port:
                        number: 8080
