# -- Provide a name in place of `argocd`
nameOverride: argocd

createAggregateRoles: false
createClusterRoles: true

crds:
  install: true
  keep: true

dex:
  enabled: false

global:
  domain: argocd.eco.tsi-dev.otc-service.com

## Server
server:
  extensions:
    containerSecurityContext:
      seccompProfile:
        type: Unconfined

  containerSecurityContext:
    seccompProfile:
      type: Unconfined

  ingress:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: letsencrypt-prod
      kubernetes.io/tls-acme: "true"
      nginx.ingress.kubernetes.io/backend-protocol: HTTPS
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-passthrough: "true"
      cert-manager.io/private-key-algorithm: RSA
      cert-manager.io/private-key-size: "4096"
      cert-manager.io/private-key-rotation-policy: Always
    ingressClassName: "nginx"
    path: /
    tls: true

repoServer:
  env:
    - name: ARGOCD_GPG_ENABLED
      value: "false"

  initContainers: 
    - name: download-tools
      image: registry.access.redhat.com/ubi8
      env:
        - name: AVP_VERSION
          value: 1.18.1
      command: [sh, -c]
      args:
        - >-
          curl -L https://github.com/argoproj-labs/argocd-vault-plugin/releases/download/v$(AVP_VERSION)/argocd-vault-plugin_$(AVP_VERSION)_linux_amd64 -o argocd-vault-plugin &&
          chmod +x argocd-vault-plugin &&
          mv argocd-vault-plugin /custom-tools/
      volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
  extraContainers:
    - name: avp
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd:v3.0.5
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: argocd-vault-plugin-helm.yaml
          name: cmp-plugin
        - mountPath: /usr/local/bin/argocd-vault-plugin
          subPath: argocd-vault-plugin
          name: custom-tools
    - name: avp-with-args
      command: [/var/run/argocd/argocd-cmp-server]
      image: quay.io/argoproj/argocd:v3.0.5
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
      volumeMounts:
        - mountPath: /var/run/argocd
          name: var-files
        - mountPath: /home/argocd/cmp-server/plugins
          name: plugins
        - mountPath: /tmp
          name: tmp
        - mountPath: /home/argocd/cmp-server/config/plugin.yaml
          subPath: argocd-vault-plugin-helm-with-args.yaml
          name: cmp-plugin
        - mountPath: /usr/local/bin/argocd-vault-plugin
          subPath: argocd-vault-plugin
          name: custom-tools
  volumes: 
    - configMap:
        name: argocd-cmp-cm
      name: cmp-plugin
    - name: custom-tools
      emptyDir: {}
  containerSecurityContext:
    seccompProfile:
      type: Unconfined

## ApplicationSet controller
applicationSet:
  containerSecurityContext:
    seccompProfile:
      type: Unconfined

configs:
  cm:
    url: https://argocd.eco.tsi-dev.otc-service.com
    oidc.config: |
      name: Keycloak
      issuer: https://keycloak.eco.tsi-dev.otc-service.com/realms/eco
      clientID: argocd
      clientSecret: $oidc.keycloak.clientSecret
      requestedScopes: ["openid", "profile", "email", "groups"]

  secret:
    createSecret: true
    extra:
      oidc.keycloak.clientSecret: {{ chart.secrets.keycloak_client_secret }}
      VAULT_ADDR: "https://vault-lb.eco.tsi-dev.otc-service.com:8200"
      AVP_AUTH_TYPE: "k8s"
      AVP_K8S_ROLE: "argocd"
      AVP_TYPE: "vault"
      AVP_MOUNT_PATH: "auth/kubernetes_otcinfra2"

  rbac:
    #most expensive fault
    #policy.default: role:readonly
    policy.csv: |
      g, /argocd-admin, role:admin

  cmp:
    create: true
    plugins: 
      argocd-vault-plugin-helm:
        discover:
          find:
            command:
              - sh
              - "-c"
              - "find . -name 'Chart.yaml' && find . -name 'values.yaml'"
        init:
          command: 
            - bash
            - "-c"
            - |
              helm repo add falcosecurity https://falcosecurity.github.io/charts
              helm dependency build
        generate:
          command:
            - bash
            - "-c"
            - |
              helm template $ARGOCD_APP_NAME --include-crds -n $ARGOCD_APP_NAMESPACE -f <(echo "$ARGOCD_ENV_HELM_VALUES") . |
              argocd-vault-plugin generate -s argocd:argocd-secret -
        allowConcurrency: true
        lockRepo: false
      argocd-vault-plugin-helm-with-args:
        allowConcurrency: true
        discover:
          find:
            command:
            - sh
            - -c
            - find . -name 'Chart.yaml' && find . -name 'values.yaml'
        generate:
          command:
          - bash
          - -c
          - |
            helm template $ARGOCD_APP_NAME -n $ARGOCD_APP_NAMESPACE ${ARGOCD_ENV_HELM_ARGS} . --include-crds |
            argocd-vault-plugin generate -s argocd:argocd-secret -
        init:
          command:
          - bash
          - -c
          - |
            helm dependency build
        lockRepo: false
