---
- hosts: cloud-launcher:!disabled
  name: "Deploy comprehensive OTC security stack"
  become: true
  vars_files:
    - "../otc-security/security-groups/enhanced-security-groups.yaml"
    - "../otc-security/security-groups/threat-intelligence-sg.yaml"
    - "../otc-security/load-balancers/enhanced-lb-config.yaml"
    - "../otc-security/load-balancers/security-policies.yaml"
    - "../otc-security/monitoring/security-metrics.yaml"
    - "../otc-security/monitoring/alerting-rules.yaml"

  tasks:
    - name: Get vault token
      ansible.builtin.set_fact:
        vault_token: "{{ lookup('community.hashi_vault.hashi_vault', 'auth/token/lookup-self') }}"
      when: "ansible_hashi_vault_token is not defined"

    - name: Set vault token
      ansible.builtin.set_fact:
        ansible_hashi_vault_token: "{{ vault_token.id }}"
        ansible_hashi_vault_auth_method: "token"
      when: "vault_token is defined"

    - name: Create security configuration directory
      ansible.builtin.file:
        path: "/etc/otc-security"
        state: directory
        mode: '0755'
      tags: ["security_setup"]

    - name: Deploy security configuration files
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: '0644'
        backup: true
      loop:
        - src: "../otc-security/security-groups/"
          dest: "/etc/otc-security/security-groups/"
        - src: "../otc-security/load-balancers/"
          dest: "/etc/otc-security/load-balancers/"
        - src: "../otc-security/monitoring/"
          dest: "/etc/otc-security/monitoring/"
      tags: ["security_config"]

    - name: Deploy security automation scripts
      ansible.builtin.copy:
        src: "../otc-security/automation/"
        dest: "/usr/local/bin/otc-security/"
        mode: '0755'
        backup: true
      tags: ["security_automation"]

    # Security Groups Deployment
    - name: Deploy enhanced security groups
      include_role:
        name: cloud_sg
      vars:
        sg: "{{ item }}"
        state: "present"
      loop: "{{ enhanced_cloud_security_groups | default([]) }}"
      tags: ["deploy_security_groups"]

    - name: Deploy threat intelligence security groups
      include_role:
        name: cloud_sg
      vars:
        sg: "{{ item }}"
        state: "present"
      loop: "{{ threat_intelligence_security_groups | default([]) }}"
      tags: ["deploy_threat_intel"]

    # Load Balancer Deployment
    - name: Deploy enhanced load balancers
      include_role:
        name: cloud_loadbalancer
      vars:
        lb: "{{ item }}"
        state: "present"
      loop: "{{ [enhanced_elb_swift, enhanced_elb_eco_infra, enhanced_elb_zuul] | select('defined') | list }}"
      tags: ["deploy_load_balancers"]

    # Monitoring Setup
    - name: Setup security monitoring
      block:
        - name: Create Prometheus rules directory
          ansible.builtin.file:
            path: "/etc/prometheus/rules"
            state: directory
            mode: '0755'

        - name: Deploy Prometheus security rules
          ansible.builtin.template:
            src: "../otc-security/monitoring/security-metrics.yaml"
            dest: "/etc/prometheus/rules/otc-security-rules.yaml"
            backup: true
          notify: restart prometheus

        - name: Deploy alerting rules
          ansible.builtin.template:
            src: "../otc-security/monitoring/alerting-rules.yaml"
            dest: "/etc/alertmanager/rules/otc-security-alerts.yaml"
            backup: true
          notify: restart alertmanager
      tags: ["deploy_monitoring"]

    # Threat Intelligence Automation
    - name: Setup threat intelligence automation
      block:
        - name: Create threat intelligence update script
          ansible.builtin.template:
            src: "../otc-security/automation/update-threat-intel.sh"
            dest: "/usr/local/bin/update-threat-intel.sh"
            mode: '0755'

        - name: Schedule threat intelligence updates
          ansible.builtin.cron:
            name: "Update OTC threat intelligence"
            minute: "0"
            hour: "*"
            job: "/usr/local/bin/update-threat-intel.sh"
            user: root
            state: present

        - name: Create systemd service for threat intelligence
          ansible.builtin.template:
            src: "../templates/otc-threat-intel.service.j2"
            dest: "/etc/systemd/system/otc-threat-intel.service"
          notify:
            - reload systemd
            - enable threat intel service

        - name: Create systemd timer for threat intelligence
          ansible.builtin.template:
            src: "../templates/otc-threat-intel.timer.j2"
            dest: "/etc/systemd/system/otc-threat-intel.timer"
          notify:
            - reload systemd
            - start threat intel timer
      tags: ["threat_intel_automation"]

    # Security Validation
    - name: Validate security configuration
      block:
        - name: Check security groups deployment
          ansible.builtin.debug:
            msg: |
              Security deployment validation:
              - Enhanced security groups: {{ enhanced_cloud_security_groups | default([]) | length }}
              - Threat intel groups: {{ threat_intelligence_security_groups | default([]) | length }}
              - Enhanced load balancers: {{ [enhanced_elb_swift, enhanced_elb_eco_infra, enhanced_elb_zuul] | select('defined') | list | length }}

        - name: Test threat intelligence script
          ansible.builtin.command:
            cmd: "/usr/local/bin/update-threat-intel.sh --dry-run"
          register: threat_intel_test
          failed_when: threat_intel_test.rc != 0
          tags: ["validate_threat_intel"]

        - name: Check security monitoring endpoints
          ansible.builtin.uri:
            url: "{{ item }}"
            method: GET
            status_code: [200, 404]
            timeout: 10
          loop:
            - "http://localhost:9090/api/v1/rules"  # Prometheus rules
            - "http://localhost:9093/api/v1/alerts"  # Alertmanager
          ignore_errors: true
          tags: ["validate_monitoring"]
      tags: ["security_validation"]

    # Security Reporting
    - name: Generate security deployment report
      ansible.builtin.template:
        src: "../templates/security-deployment-report.j2"
        dest: "/var/log/otc-security-deployment-{{ ansible_date_time.epoch }}.txt"
        mode: '0644'
      tags: ["security_reporting"]

  handlers:
    - name: restart prometheus
      ansible.builtin.systemd:
        name: prometheus
        state: restarted
      when: ansible_service_mgr == "systemd"

    - name: restart alertmanager
      ansible.builtin.systemd:
        name: alertmanager
        state: restarted
      when: ansible_service_mgr == "systemd"

    - name: reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes

    - name: enable threat intel service
      ansible.builtin.systemd:
        name: otc-threat-intel.service
        enabled: yes

    - name: start threat intel timer
      ansible.builtin.systemd:
        name: otc-threat-intel.timer
        state: started
        enabled: yes
